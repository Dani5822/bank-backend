datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserType {
  Admin
  User
}

enum Currency {
  HUF
  USD
  EUR
}

enum ExpenseCategory {
  Shopping
  Rent
  Transport
  Transfer
  Transaction
  Other
}

enum IncomeCategory {
  Salary
  Transfer
  Transaction
  Other
}

enum Metric {
  Day
  Week
  Month
  Year
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  firstName String
  lastName  String
  role      UserType  @default(User)
  email     String    @unique
  password  String
  Expenses  Expense[]
  expenseId String[]  @db.ObjectId
  Incomes   Income[]
  incomeId  String[]  @db.ObjectId
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Accounts  Account[] @relation(fields: [accountId], references: [id])
  accountId String[]  @db.ObjectId
}

model Income {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  total        Float
  category     IncomeCategory @default(Other)
  description  String?
  User         User           @relation(fields: [userId], references: [id])
  userId       String         @db.ObjectId
  Account      Account        @relation(fields: [accountId], references: [id])
  accountId    String         @db.ObjectId
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model Expense {
  id           String          @id @default(auto()) @map("_id") @db.ObjectId
  total        Float
  category     ExpenseCategory @default(Other)
  description  String?
  User         User            @relation(fields: [userId], references: [id])
  userId       String          @db.ObjectId
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  Account      Account         @relation(fields: [accountId], references: [id])
  accountId    String          @db.ObjectId
  RepeatableTransaction RepeatableTransaction? @relation(fields: [repeatableTransactionId], references: [id])
  repeatableTransactionId String? @db.ObjectId
}

model Account {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  Users     User[]    @relation(fields: [userId], references: [id])
  userId    String[]  @db.ObjectId
  total     Float
  ownerName String
  ownerId String
  Expenses  Expense[]
  Incomes   Income[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  currency  Currency  @default(HUF)

  RepeatableTransaction RepeatableTransaction[]
}

model RepeatableTransaction {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  repeatStart  DateTime @default(now())
  repeatAmount Int      @default(1)
  repeatMetric Metric   @default(Day)
  repeatEnd    DateTime @default(now())
  lastChange   DateTime @default(now())
  Account      Account  @relation(fields: [accountId], references: [id])
  accountId    String   @db.ObjectId
  createdAt    DateTime @default(now())
  total        Float
  category     ExpenseCategory @default(Other)
  description  String?
  Expenses Expense[] 
}
